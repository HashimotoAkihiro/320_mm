/***************************************************************************/
/* The 2nd ARC/CPSY/RECONF High-Performance Computer System Design Contest */
/* 310_sort Version 2014-06-06                                             */
/***************************************************************************/

/* USE_SIMD alternatives
#define USE_SIMD        0    (using SIMD emulation)
#define USE_SIMD        1    (using real SIMD instructions)
*/
#ifndef USE_SIMD
#define USE_SIMD        1
#endif

//#define USE_QSORT
#define USE_RADIXSORT

#include "../lib/lib.c"
#if defined USE_SIMD && USE_SIMD == 0
#include "../lib/simd-emu.c"
#endif

/**********************************************************************/
#ifdef __ALTERA__
volatile int *init_data = (int*)0x0c000000;
volatile int *init_n    = (int*)0x0c03fffc;
#define DATA_START 0x0c090000
#else
volatile int *init_data = (int*)0x00040000;
volatile int *init_n    = (int*)0x0007fffc;
#define DATA_START 0x90000
#endif

/* max data size 16MB (4M words) */
/* (at least 16MB spacing between memory region is required) */
int *data = (int*) DATA_START;

/* temporary storages */
#if 0
#define BUF1    ((int*)0x200000)
#define BUF2    ((int*)0x300000)
#else
#define BUF1    ((int*)0x2000000)
#define BUF2    ((int*)0x3000000)
#endif

int *BUFtbl[] = { BUF1, BUF2, BUF1, BUF2 };
int curBUFptr = 0;

#ifdef USE_QSORT
/**********************************************************************/
void qsort(int data[], int left, int right)
{
    int temp = 0;
    int i = left + 1;
    int k = right;
    while (i < k) {
        while (data[i] < data[left] && i < right) i++;
        while (data[k] >= data[left] && k > left) k--;
        if (i < k) {
            temp = data[i];
            data[i] = data[k];
            data[k] = temp;
        }
    }
    if (right-left != 1 || data[left] > data[k]) {
        temp = data[left];
        data[left] = data[k];
        data[k] = temp;
    }
    if (left < k-1)  qsort(data, left, k-1);
    if (k+1 < right) qsort(data, k+1, right);
}
#endif

#ifdef  USE_RADIXSORT
/**********************************************************************/
//#define BUCKETBIT       8    /* outer-loop is iteration of 4 */
#define BUCKETBIT       11   /* outer-loop is iteration of 3 (max for BRAM 16KB)*/
//#define BUCKETBIT       12   /* outer-loop is iteration of 3 (max for BRAM 32KB)*/
//#define BUCKETBIT       13   /* outer-loop is iteration of 3 (max for BRAM 64KB)*/
//#define BUCKETBIT       16   /* outer-loop is iteration of 2 */
#define NBUCKETS        (1 << BUCKETBIT)
#define BUCKETMASK      (NBUCKETS - 1)

#if BUCKETBIT < 8
# error "BUCKETBIT should be greater than 8"
#endif

static int count[NBUCKETS] __attribute((aligned(16)));  /* counter table */

void radix_sort(int data[], int size)
{
    int *buff1;
    int *buff2;
    int i;
#if 0
    /* initialize (for debug) */
    for (i = 0; i < size; i++)
        BUF[i] = 0;
    for (i = 0; i < NBUCKETS; i++)
        count[i] = 0;
#endif

#ifdef  USE_SIMD

#if USE_SIMD == 0

    simd128 zero = {0, 0, 0, 0};

    buff1 = data;
    buff2 = BUFtbl[curBUFptr];

    for (i = 0; i < ((32+BUCKETBIT-1)/BUCKETBIT); i++) {
        int shift = i*BUCKETBIT;
        int x;

        for (x = 0; x < NBUCKETS; x += 16) {
            simd128_store(zero, &count[x]);
            simd128_store(zero, &count[x+4]);
            simd128_store(zero, &count[x+8]);
            simd128_store(zero, &count[x+12]);
        }

        for (x = 0; x < size; x += 16) {
            simd128 v1, v2, v3, v4;

            simd128_load(v1, &buff1[x]);
            simd128_load(v2, &buff1[x+4]);
            simd128_load(v3, &buff1[x+8]);
            simd128_load(v4, &buff1[x+12]);

            simd128_shift_right_arithmetic(v1, v1, shift);
            simd128_shift_right_arithmetic(v2, v2, shift);
            simd128_shift_right_arithmetic(v3, v3, shift);
            simd128_shift_right_arithmetic(v4, v4, shift);

            /* SIMD logical-AND */
            v1[3] &= BUCKETMASK;
            v1[2] &= BUCKETMASK;
            v1[1] &= BUCKETMASK;
            v1[0] &= BUCKETMASK;

            /* SIMD logical-AND */
            v2[3] &= BUCKETMASK;
            v2[2] &= BUCKETMASK;
            v2[1] &= BUCKETMASK;
            v2[0] &= BUCKETMASK;

            /* SIMD logical-AND */
            v3[3] &= BUCKETMASK;
            v3[2] &= BUCKETMASK;
            v3[1] &= BUCKETMASK;
            v3[0] &= BUCKETMASK;

            /* SIMD logical-AND */
            v4[3] &= BUCKETMASK;
            v4[2] &= BUCKETMASK;
            v4[1] &= BUCKETMASK;
            v4[0] &= BUCKETMASK;

            count[v1[0]]++;
            count[v1[1]]++;
            count[v1[2]]++;
            count[v1[3]]++;

            count[v2[0]]++;
            count[v2[1]]++;
            count[v2[2]]++;
            count[v2[3]]++;

            count[v3[0]]++;
            count[v3[1]]++;
            count[v3[2]]++;
            count[v3[3]]++;

            count[v4[0]]++;
            count[v4[1]]++;
            count[v4[2]]++;
            count[v4[3]]++;
        }

#if 0
        for (x = 1; x < NBUCKETS; x++)
            count[x] += count[x-1];
#else
        int s = 0;
        for (x = 1; x < NBUCKETS; x += 16) {
            simd128 v1, v2, v3, v4;
            simd128 v5, v6, v7, v8;

            simd128_load(v1, &count[x-1]);
            simd128_load(v2, &count[x-1+4]);
            simd128_load(v3, &count[x-1+8]);
            simd128_load(v4, &count[x-1+12]);

            simd128_move(v5, v1);
            simd128_move(v6, v2);
            simd128_move(v7, v3);
            simd128_move(v8, v4);

            simd128_shift_left_word(v1, v1, 0);
            simd128_shift_left_word(v2, v2, 0);
            simd128_shift_left_word(v3, v3, 0);
            simd128_shift_left_word(v4, v4, 0);

            simd128_add(v5, v5, v1);
            simd128_add(v6, v6, v2);
            simd128_add(v7, v7, v3);
            simd128_add(v8, v8, v4);

            simd128_shift_left_word(v1, v1, 0);
            simd128_shift_left_word(v2, v2, 0);
            simd128_shift_left_word(v3, v3, 0);
            simd128_shift_left_word(v4, v4, 0);

            simd128_add(v5, v5, v1);
            simd128_add(v6, v6, v2);
            simd128_add(v7, v7, v3);
            simd128_add(v8, v8, v4);

            simd128_shift_left_word(v1, v1, 0);
            simd128_shift_left_word(v2, v2, 0);
            simd128_shift_left_word(v3, v3, 0);
            simd128_shift_left_word(v4, v4, 0);

            simd128_add(v5, v5, v1);
            simd128_add(v6, v6, v2);
            simd128_add(v7, v7, v3);
            simd128_add(v8, v8, v4);

            simd128_add_scalar(v6, v6, v5[3]);
            simd128_add_scalar(v7, v7, v6[3]);
            simd128_add_scalar(v8, v8, v7[3]);

            simd128_add_scalar(v5, v5, s);
            simd128_add_scalar(v6, v6, s);
            simd128_add_scalar(v7, v7, s);
            simd128_add_scalar(v8, v8, s);

            simd128_store(v5, &count[x-1]);
            simd128_store(v6, &count[x-1+4]);
            simd128_store(v7, &count[x-1+8]);
            simd128_store(v8, &count[x-1+12]);

            s = v8[3];
        }
#endif

//        for (x = size-1; x >= 0; x--) {
        for (x = size; x > 0; x -= 16) {
            simd128 v1, v2, v3, v4;
            simd128 v5, v6, v7, v8;

            simd128_load(v1, &buff1[x-16]);
            simd128_load(v2, &buff1[x-16+4]);
            simd128_load(v3, &buff1[x-16+8]);
            simd128_load(v4, &buff1[x-16+12]);

            simd128_shift_right_arithmetic(v5, v1, shift);
            simd128_shift_right_arithmetic(v6, v2, shift);
            simd128_shift_right_arithmetic(v7, v3, shift);
            simd128_shift_right_arithmetic(v8, v4, shift);

            /* SIMD logical-AND */
            v5[3] &= BUCKETMASK;
            v5[2] &= BUCKETMASK;
            v5[1] &= BUCKETMASK;
            v5[0] &= BUCKETMASK;

            /* SIMD logical-AND */
            v6[3] &= BUCKETMASK;
            v6[2] &= BUCKETMASK;
            v6[1] &= BUCKETMASK;
            v6[0] &= BUCKETMASK;

            /* SIMD logical-AND */
            v7[3] &= BUCKETMASK;
            v7[2] &= BUCKETMASK;
            v7[1] &= BUCKETMASK;
            v7[0] &= BUCKETMASK;

            /* SIMD logical-AND */
            v8[3] &= BUCKETMASK;
            v8[2] &= BUCKETMASK;
            v8[1] &= BUCKETMASK;
            v8[0] &= BUCKETMASK;

            count[v8[3]]--;
            buff2[count[v8[3]]] = v4[3];
            count[v8[2]]--;
            buff2[count[v8[2]]] = v4[2];
            count[v8[1]]--;
            buff2[count[v8[1]]] = v4[1];
            count[v8[0]]--;
            buff2[count[v8[0]]] = v4[0];

            count[v7[3]]--;
            buff2[count[v7[3]]] = v3[3];
            count[v7[2]]--;
            buff2[count[v7[2]]] = v3[2];
            count[v7[1]]--;
            buff2[count[v7[1]]] = v3[1];
            count[v7[0]]--;
            buff2[count[v7[0]]] = v3[0];

            count[v6[3]]--;
            buff2[count[v6[3]]] = v2[3];
            count[v6[2]]--;
            buff2[count[v6[2]]] = v2[2];
            count[v6[1]]--;
            buff2[count[v6[1]]] = v2[1];
            count[v6[0]]--;
            buff2[count[v6[0]]] = v2[0];

            count[v5[3]]--;
            buff2[count[v5[3]]] = v1[3];
            count[v5[2]]--;
            buff2[count[v5[2]]] = v1[2];
            count[v5[1]]--;
            buff2[count[v5[1]]] = v1[1];
            count[v5[0]]--;
            buff2[count[v5[0]]] = v1[0];
        }

        /* switch buffer */
        if (i == 0) {
            buff1 = buff2;
            buff2 = BUFtbl[++curBUFptr];
        }
        else if (i == ((32+BUCKETBIT-1)/BUCKETBIT)-2) {
            buff1 = buff2;
            buff2 = data;
        }
        else {
            buff1 = buff2;
            buff2 = BUFtbl[++curBUFptr];
        }

    }

#elif USE_SIMD == 1

//    simd128 zero = {0, 0, 0, 0};
    // SPR[0] is assumed zero

    buff1 = data;
    buff2 = BUFtbl[curBUFptr];

    for (i = 0; i < ((32+BUCKETBIT-1)/BUCKETBIT); i++) {
        int shift = i*BUCKETBIT;
        int x;

        for (x = 0; x < NBUCKETS; x += 16) {
            asm volatile (".set    noat\n\t"
                          "sq      $0,(%0)\n\t"
                          "sq      $0,16(%0)\n\t"
                          "sq      $0,32(%0)\n\t"
                          "sq      $0,48(%0)\n\t"
                          ".set    at\n\t"
                          : : "r" (&count[x]) );
        }

        for (x = 0; x < size; x += 16) {
            int v10, v11, v12, v13;
            int v20, v21, v22, v23;
            int v30, v31, v32, v33;
            int v40, v41, v42, v43;

            asm volatile (".set    noat\n\t");

            /*
              v1 = SPR[1], v2 = SPR[2], v3 = SPR[3], v4 = SPR[4]
            */

            asm volatile ("lq      $1,(%0)\n\t"
                          "lq      $2,16(%0)\n\t"
                          "lq      $3,32(%0)\n\t"
                          "lq      $4,48(%0)\n\t"
                          : : "r" (&buff1[x]) );

#if 1
            asm volatile ("pextw   %0,$1,0\n\t"
                          "pextw   %1,$1,1\n\t"
                          "pextw   %2,$1,2\n\t"
                          "pextw   %3,$1,3\n\t"
                          : "=r" (v10), "=r" (v11), "=r" (v12), "=r" (v13) :);
            v10 = (v10 >> shift) & BUCKETMASK;
            v11 = (v11 >> shift) & BUCKETMASK;
            v12 = (v12 >> shift) & BUCKETMASK;
            v13 = (v13 >> shift) & BUCKETMASK;
#else
            volatile int mask128[4] __attribute((aligned(16)));
            mask128[0] = mask128[1] = mask128[2] = mask128[3] = shift;

            asm volatile ("lq      $6,(%0)\n\t" :: "r" (&mask128[0]));

            asm volatile ("psravw  $1,$1,%0\n\t"
                          "psravw  $2,$2,%0\n\t"
                          "psravw  $3,$3,%0\n\t"
                          "psravw  $4,$4,%0\n\t"
                          :: "r" (shift) );
            asm volatile ("pand    $1,$1,$6\n\t"
                          "pand    $2,$2,$6\n\t"
                          "pand    $3,$3,$6\n\t"
                          "pand    $4,$4,$6\n\t");
            asm volatile ("pextw   %0,$1,0\n\t"
                          "pextw   %1,$1,1\n\t"
                          "pextw   %2,$1,2\n\t"
                          "pextw   %3,$1,3\n\t"
                          : "=r" (v10), "=r" (v11), "=r" (v12), "=r" (v13) :);
#endif

            count[v10]++;
            count[v11]++;
            count[v12]++;
            count[v13]++;

            asm volatile ("pextw   %0,$2,0\n\t"
                          "pextw   %1,$2,1\n\t"
                          "pextw   %2,$2,2\n\t"
                          "pextw   %3,$2,3\n\t"
                          : "=r" (v20), "=r" (v21), "=r" (v22), "=r" (v23) :);

            v20 = (v20 >> shift) & BUCKETMASK;
            v21 = (v21 >> shift) & BUCKETMASK;
            v22 = (v22 >> shift) & BUCKETMASK;
            v23 = (v23 >> shift) & BUCKETMASK;

            count[v20]++;
            count[v21]++;
            count[v22]++;
            count[v23]++;

            asm volatile ("pextw   %0,$3,0\n\t"
                          "pextw   %1,$3,1\n\t"
                          "pextw   %2,$3,2\n\t"
                          "pextw   %3,$3,3\n\t"
                          : "=r" (v30), "=r" (v31), "=r" (v32), "=r" (v33) :);

            v30 = (v30 >> shift) & BUCKETMASK;
            v31 = (v31 >> shift) & BUCKETMASK;
            v32 = (v32 >> shift) & BUCKETMASK;
            v33 = (v33 >> shift) & BUCKETMASK;

            count[v30]++;
            count[v31]++;
            count[v32]++;
            count[v33]++;

            asm volatile ("pextw   %0,$4,0\n\t"
                          "pextw   %1,$4,1\n\t"
                          "pextw   %2,$4,2\n\t"
                          "pextw   %3,$4,3\n\t"
                          : "=r" (v40), "=r" (v41), "=r" (v42), "=r" (v43) :);

            asm volatile (".set    at\n\t");

            v40 = (v40 >> shift) & BUCKETMASK;
            v41 = (v41 >> shift) & BUCKETMASK;
            v42 = (v42 >> shift) & BUCKETMASK;
            v43 = (v43 >> shift) & BUCKETMASK;

            count[v40]++;
            count[v41]++;
            count[v42]++;
            count[v43]++;
        }

#if 0
        for (x = 1; x < NBUCKETS; x++)
            count[x] += count[x-1];
#else
        /*
          a0 a1 a2 a3|a4 a5 a6 a7|a8 a9 a10 a11|a12 a13 a14 a15|
           0 a0 a1 a2| 0 a4 a5 a6| 0 a8  a9 a10|  0 a12 a13 a14| <= add the shifted value
           0  0 a0 a1| 0  0 a4 a5| 0  0  a8  a9|  0   0 a12 a13| <= add the shifted value
           0  0  0 a0| 0  0  0 a4| 0  0   0  a8|  0   0   0 a12| <= add the shifted value
           -----------------------------------------------------
        */

        int s = 0;
        for (x = 1; x < NBUCKETS; x += 16) {
            int a1, a2, a3;
            asm volatile (".set    noat\n\t");

            /*
              v1 = SPR[1], v2 = SPR[2], v3 = SPR[3], v4 = SPR[4]
              v5 = SPR[5], v6 = SPR[6], v7 = SPR[7], v8 = SPR[8]
            */

            asm volatile ("lq      $1,(%0)\n\t"
                          "lq      $2,16(%0)\n\t"
                          "lq      $3,32(%0)\n\t"
                          "lq      $4,48(%0)\n\t"
                          : : "r" (&count[x-1]) );

            asm volatile ("paddw   $5,$1,$0\n\t"
                          "paddw   $6,$2,$0\n\t"
                          "paddw   $7,$3,$0\n\t"
                          "paddw   $8,$4,$0\n\t"
                          //
                          "psllww  $1,$1,$0\n\t"
                          "psllww  $2,$2,$0\n\t"
                          "psllww  $3,$3,$0\n\t"
                          "psllww  $4,$4,$0\n\t"
                          "paddw   $5,$5,$1\n\t"
                          "paddw   $6,$6,$2\n\t"
                          "paddw   $7,$7,$3\n\t"
                          "paddw   $8,$8,$4\n\t"
                          //
                          "psllww  $1,$1,$0\n\t"
                          "psllww  $2,$2,$0\n\t"
                          "psllww  $3,$3,$0\n\t"
                          "psllww  $4,$4,$0\n\t"
                          "paddw   $5,$5,$1\n\t"
                          "paddw   $6,$6,$2\n\t"
                          "paddw   $7,$7,$3\n\t"
                          "paddw   $8,$8,$4\n\t"
                          //
                          "psllww  $1,$1,$0\n\t"
                          "psllww  $2,$2,$0\n\t"
                          "psllww  $3,$3,$0\n\t"
                          "psllww  $4,$4,$0\n\t"
                          "paddw   $5,$5,$1\n\t"
                          "paddw   $6,$6,$2\n\t"
                          "paddw   $7,$7,$3\n\t"
                          "paddw   $8,$8,$4\n\t"
                          //
                          "pextw   %0,$5,3\n\t"
                          "nop\n\t"
                          "nop\n\t"
                          "paddsw  $6,$6,%0\n\t"
                          "nop\n\t"
                          "nop\n\t"
                          "pextw   %1,$6,3\n\t"
                          "nop\n\t"
                          "nop\n\t"
                          "paddsw  $7,$7,%1\n\t"
                          "nop\n\t"
                          "nop\n\t"
                          "pextw   %2,$7,3\n\t"
                          "nop\n\t"
                          "nop\n\t"
                          "paddsw  $8,$8,%2\n\t"
                          : "=r" (a1), "=r" (a2), "=r" (a3) :);

            asm volatile ("paddsw  $5,$5,%0\n\t"
                          "paddsw  $6,$6,%0\n\t"
                          "paddsw  $7,$7,%0\n\t"
                          "paddsw  $8,$8,%0\n\t"
                          :: "r" (s));

            asm volatile ("sq      $5,(%0)\n\t"
                          "sq      $6,16(%0)\n\t"
                          "sq      $7,32(%0)\n\t"
                          "sq      $8,48(%0)\n\t"
                          : : "r" (&count[x-1]) );

            // s = v8[3];
            asm volatile ("pextw   %0,$8,3\n\t" : "=r" (s));

            asm volatile (".set    at\n\t");
        }
#endif

//        for (x = size-1; x >= 0; x--) {
        for (x = size; x > 0; x -= 16) {
            int v10, v11, v12, v13;
            int v20, v21, v22, v23;
            int v30, v31, v32, v33;
            int v40, v41, v42, v43;
            int u0, u1, u2, u3;

            asm volatile (".set    noat\n\t");

            /*
              v1 = SPR[1], v2 = SPR[2], v3 = SPR[3], v4 = SPR[4]
            */

            asm volatile ("lq      $1,(%0)\n\t"
                          "lq      $2,16(%0)\n\t"
                          "lq      $3,32(%0)\n\t"
                          "lq      $4,48(%0)\n\t"
                          : : "r" (&buff1[x-16]) );

            asm volatile ("pextw   %0,$1,0\n\t"
                          "pextw   %1,$1,1\n\t"
                          "pextw   %2,$1,2\n\t"
                          "pextw   %3,$1,3\n\t"
                          : "=r" (v10), "=r" (v11), "=r" (v12), "=r" (v13) :);

            v10 = (v10 >> shift) & BUCKETMASK;
            v11 = (v11 >> shift) & BUCKETMASK;
            v12 = (v12 >> shift) & BUCKETMASK;
            v13 = (v13 >> shift) & BUCKETMASK;

            asm volatile ("pextw   %0,$2,0\n\t"
                          "pextw   %1,$2,1\n\t"
                          "pextw   %2,$2,2\n\t"
                          "pextw   %3,$2,3\n\t"
                          : "=r" (v20), "=r" (v21), "=r" (v22), "=r" (v23) :);

            v20 = (v20 >> shift) & BUCKETMASK;
            v21 = (v21 >> shift) & BUCKETMASK;
            v22 = (v22 >> shift) & BUCKETMASK;
            v23 = (v23 >> shift) & BUCKETMASK;

            asm volatile ("pextw   %0,$3,0\n\t"
                          "pextw   %1,$3,1\n\t"
                          "pextw   %2,$3,2\n\t"
                          "pextw   %3,$3,3\n\t"
                          : "=r" (v30), "=r" (v31), "=r" (v32), "=r" (v33) :);

            v30 = (v30 >> shift) & BUCKETMASK;
            v31 = (v31 >> shift) & BUCKETMASK;
            v32 = (v32 >> shift) & BUCKETMASK;
            v33 = (v33 >> shift) & BUCKETMASK;

            asm volatile ("pextw   %0,$4,0\n\t"
                          "pextw   %1,$4,1\n\t"
                          "pextw   %2,$4,2\n\t"
                          "pextw   %3,$4,3\n\t"
                          : "=r" (v40), "=r" (v41), "=r" (v42), "=r" (v43) :);

            v40 = (v40 >> shift) & BUCKETMASK;
            v41 = (v41 >> shift) & BUCKETMASK;
            v42 = (v42 >> shift) & BUCKETMASK;
            v43 = (v43 >> shift) & BUCKETMASK;

/*
            count[v43]--;
            buff2[count[v43]] = buff1[x-1];
            count[v42]--;
            buff2[count[v42]] = buff1[x-2];
            count[v41]--;
            buff2[count[v41]] = buff1[x-3];
            count[v40]--;
            buff2[count[v40]] = buff1[x-4];

            count[v33]--;
            buff2[count[v33]] = buff1[x-5];
            count[v32]--;
            buff2[count[v32]] = buff1[x-6];
            count[v31]--;
            buff2[count[v31]] = buff1[x-7];
            count[v30]--;
            buff2[count[v30]] = buff1[x-8];

            count[v23]--;
            buff2[count[v23]] = buff1[x-9];
            count[v22]--;
            buff2[count[v22]] = buff1[x-10];
            count[v21]--;
            buff2[count[v21]] = buff1[x-11];
            count[v20]--;
            buff2[count[v20]] = buff1[x-12];

            count[v13]--;
            buff2[count[v13]] = buff1[x-13];
            count[v12]--;
            buff2[count[v12]] = buff1[x-14];
            count[v11]--;
            buff2[count[v11]] = buff1[x-15];
            count[v10]--;
            buff2[count[v10]] = buff1[x-16];
*/

            /* extract from SPR[4] */
            asm volatile ("pextw   %0,$4,0\n\t"
                          "pextw   %1,$4,1\n\t"
                          "pextw   %2,$4,2\n\t"
                          "pextw   %3,$4,3\n\t"
                          : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);

            count[v43]--;
            buff2[count[v43]] = buff1[x-1];
            count[v42]--;
            buff2[count[v42]] = buff1[x-2];
            count[v41]--;
            buff2[count[v41]] = buff1[x-3];
            count[v40]--;
            buff2[count[v40]] = buff1[x-4];

            /* extract from SPR[3] */
            asm volatile ("pextw   %0,$3,0\n\t"
                          "pextw   %1,$3,1\n\t"
                          "pextw   %2,$3,2\n\t"
                          "pextw   %3,$3,3\n\t"
                          : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);

            count[v33]--;
            buff2[count[v33]] = buff1[x-5];
            count[v32]--;
            buff2[count[v32]] = buff1[x-6];
            count[v31]--;
            buff2[count[v31]] = buff1[x-7];
            count[v30]--;
            buff2[count[v30]] = buff1[x-8];

            /* extract from SPR[2] */
            asm volatile ("pextw   %0,$2,0\n\t"
                          "pextw   %1,$2,1\n\t"
                          "pextw   %2,$2,2\n\t"
                          "pextw   %3,$2,3\n\t"
                          : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);

            count[v23]--;
            buff2[count[v23]] = buff1[x-9];
            count[v22]--;
            buff2[count[v22]] = buff1[x-10];
            count[v21]--;
            buff2[count[v21]] = buff1[x-11];
            count[v20]--;
            buff2[count[v20]] = buff1[x-12];

            /* extract from SPR[1] */
            asm volatile ("pextw   %0,$1,0\n\t"
                          "pextw   %1,$2,1\n\t"
                          "pextw   %2,$2,2\n\t"
                          "pextw   %3,$2,3\n\t"
                          : "=r" (u0), "=r" (u1), "=r" (u2), "=r" (u3) :);

            count[v13]--;
            buff2[count[v13]] = buff1[x-13];
            count[v12]--;
            buff2[count[v12]] = buff1[x-14];
            count[v11]--;
            buff2[count[v11]] = buff1[x-15];
            count[v10]--;
            buff2[count[v10]] = buff1[x-16];

            asm volatile (".set    at\n\t");
        }

        /* switch buffer */
        if (i == 0) {
            buff1 = buff2;
            buff2 = BUFtbl[++curBUFptr];
        }
        else if (i == ((32+BUCKETBIT-1)/BUCKETBIT)-2) {
            buff1 = buff2;
            buff2 = data;
        }
        else {
            buff1 = buff2;
            buff2 = BUFtbl[++curBUFptr];
        }

    }

#else
# error "illegal USE_SIMD setting"
#endif

#else   /* not-defined USE_SIMD */
    /* original code */
    buff1 = data;
    buff2 = BUFtbl[curBUFptr];

    for (i = 0; i < ((32+BUCKETBIT-1)/BUCKETBIT); i++) {
        int shift = i*BUCKETBIT;
        int x;

        for (x = 0; x < NBUCKETS; x++)
            count[x] = 0;

        for (x = 0; x < size; x++)
            count[(buff1[x] >> shift) & BUCKETMASK]++;

        for (x = 1; x < NBUCKETS; x++)
            count[x] += count[x-1];

        for (x = size-1; x >= 0; x--) {
            int y;
            y = (buff1[x] >> shift) & BUCKETMASK;
            count[y]--;
            buff2[count[y]] = buff1[x];
        }

        /* switch buffer */
        if (i == 0) {
            buff1 = buff2;
            buff2 = BUFtbl[++curBUFptr];
        }
        else if (i == ((32+BUCKETBIT-1)/BUCKETBIT)-2) {
            buff1 = buff2;
            buff2 = data;
        }
        else {
            buff1 = buff2;
            buff2 = BUFtbl[++curBUFptr];
        }

    }
#endif  /* not-defined USE_SIMD */

}
#endif  /* USE_RADIXSORT */

/**********************************************************************/
int main(void) {
    int i;
    int n = *init_n;

    mylib_display_char('s');
    mylib_display_char('o');
    mylib_display_char('r');
    mylib_display_char('t');
    mylib_display_char(' ');
    mylib_display_char('n');
    mylib_display_char('=');
    mylib_display_dec(n);
    mylib_display_newline();
    mylib_display_newline();
    
//    int *data = (int*) DATA_START;

    /* ----- Initialize ----- */ 
#ifdef  USE_SIMD

#if USE_SIMD == 0

    for (i = 0; i < n; i += 16) {
        simd128 c = { 0, 1, 2, 3 };
        simd128 v0, v1, v2, v3;
        int d = i % (64*1024);

        simd128_load(v0, (int*)&init_data[d]);
        simd128_load(v1, (int*)&init_data[d+4]);
        simd128_load(v2, (int*)&init_data[d+8]);
        simd128_load(v3, (int*)&init_data[d+12]);

        simd128_add_scalar(v0, v0, i);
        simd128_add_scalar(v1, v1, i+4);
        simd128_add_scalar(v2, v2, i+8);
        simd128_add_scalar(v3, v3, i+12);

        simd128_add(v0, v0, c);
        simd128_add(v1, v1, c);
        simd128_add(v2, v2, c);
        simd128_add(v3, v3, c);

        simd128_store(v0, &data[i]);
        simd128_store(v1, &data[i+4]);
        simd128_store(v2, &data[i+8]);
        simd128_store(v3, &data[i+12]);
    }

#elif USE_SIMD == 1

    /* zero clear SPR[0] */
/*  // this is NG code
    asm volatile (".set   noat\n\t"
                  "psubw  $0,$0,$0\n\t"
                  ".set   at");*/
    asm volatile (".set   noat\n\t"
                  "pinsw  $0,$0,$0,0\n\t"
                  "nop\n\t"
                  "nop\n\t"
                  "pinsw  $0,$0,$0,1\n\t"
                  "nop\n\t"
                  "nop\n\t"
                  "pinsw  $0,$0,$0,2\n\t"
                  "nop\n\t"
                  "nop\n\t"
                  "pinsw  $0,$0,$0,3\n\t"
                  ".set   at");

//    simd128 c = { 0, 1, 2, 3 };
    asm volatile (".set   noat\n\t"
                  "li     $1,1\n\t"
                  "pinsw  $5,$5,$0,0\n\t"
                  "nop\n\t"
                  "addiu  $1,$1,1\n\t"          // speculative addition
                  "pinsw  $5,$5,$1,1\n\t"       // GPR[1] is still 1
                  "nop\n\t"
                  "addiu  $1,$1,1\n\t"          // speculative addition
                  "pinsw  $5,$5,$1,2\n\t"       // GPR[1] is still 2
                  "nop\n\t"
                  "nop\n\t"
                  "pinsw  $5,$5,$1,3\n\t"       // GPR[1] is still 3
                  ".set   at");

    for (i = 0; i < n; i += 16) {
        int d = i % (64*1024);

        asm volatile (".set    noat\n\t");

        /*
          v0 = SPR[1], v1 = SPR[2], v2 = SPR[3], v3 = SPR[4]
          c  = SPR[5]
         */
        asm volatile ("lq      $1,(%0)\n\t"
                      "lq      $2,16(%0)\n\t"
                      "lq      $3,32(%0)\n\t"
                      "lq      $4,48(%0)\n\t"
                      : : "r" (&init_data[d]) );

        asm volatile ("paddsw  $1,$1,%0\n\t"
                      "paddsw  $2,$2,%1\n\t"
                      "paddsw  $3,$3,%2\n\t"
                      "paddsw  $4,$4,%3\n\t"
                      : : "r" (i), "r" (i+4), "r" (i+8), "r" (i+12) );

        asm volatile ("paddw   $1,$1,$5\n\t"
                      "paddw   $2,$2,$5\n\t"
                      "paddw   $3,$3,$5\n\t"
                      "paddw   $4,$4,$5\n\t");

        asm volatile ("sq      $1,(%0)\n\t"
                      "sq      $2,16(%0)\n\t"
                      "sq      $3,32(%0)\n\t"
                      "sq      $4,48(%0)\n\t"
                      : : "r" (&data[i]) );

        asm volatile (".set    at\n\t");
    }

#else
# error "illegal USE_SIMD setting"
#endif

#else   /* not-defined USE_SIMD */
    for (i=0; i<n; i++) data[i] = init_data[i % (64*1024)] + i;
#endif  /* not-defined USE_SIMD */

#ifdef  USE_SIMD

#if USE_SIMD == 0

    simd128 v0, v1;
    for (i = 0; i < 100-8; i += 8) {
        simd128_load(v0, &data[i]);
        simd128_load(v1, &data[i+4]);

        mylib_display_dec(v0[0]); mylib_display_char(' ');
        mylib_display_dec(v0[1]); mylib_display_char(' ');
        mylib_display_dec(v0[2]); mylib_display_char(' ');
        mylib_display_dec(v0[3]); mylib_display_char(' ');

        mylib_display_dec(v1[0]); mylib_display_char(' ');
        mylib_display_dec(v1[1]); mylib_display_char(' ');
        mylib_display_dec(v1[2]); mylib_display_char(' ');
        mylib_display_dec(v1[3]); mylib_display_char(' ');
    }

    simd128_load(v0, &data[i]);

    mylib_display_dec(v0[0]); mylib_display_char(' ');
    mylib_display_dec(v0[1]); mylib_display_char(' ');
    mylib_display_dec(v0[2]); mylib_display_char(' ');
    mylib_display_dec(v0[3]); mylib_display_char(' ');

    mylib_display_newline();

#elif USE_SIMD == 1

    for (i = 0; i < 100-8; i += 8) {
        int v0, v1, v2, v3, v4, v5, v6, v7;

        asm volatile (".set    noat\n\t");

        /*
          v0 = SPR[1], v1 = SPR[2]
         */

        asm volatile ("lq      $1,(%0)\n\t"
                      "lq      $2,16(%0)\n\t"
                      : : "r" (&data[i]) );

        asm volatile ("nop\n\t"
                      /* read from first qword */
                      "pextw   %0,$1,0\n\t"
                      "pextw   %1,$1,1\n\t"
                      "pextw   %2,$1,2\n\t"
                      "pextw   %3,$1,3\n\t"
                      /* read from second qword */
                      "pextw   %4,$2,0\n\t"
                      "pextw   %5,$2,1\n\t"
                      "pextw   %6,$2,2\n\t"
                      "pextw   %7,$2,3\n\t"
                      : "=r" (v0), "=r" (v1), "=r" (v2), "=r" (v3),
                        "=r" (v4), "=r" (v5), "=r" (v6), "=r" (v7) :);

        asm volatile (".set    at\n\t");

        mylib_display_dec(v0); mylib_display_char(' ');
        mylib_display_dec(v1); mylib_display_char(' ');
        mylib_display_dec(v2); mylib_display_char(' ');
        mylib_display_dec(v3); mylib_display_char(' ');

        mylib_display_dec(v4); mylib_display_char(' ');
        mylib_display_dec(v5); mylib_display_char(' ');
        mylib_display_dec(v6); mylib_display_char(' ');
        mylib_display_dec(v7); mylib_display_char(' ');
    }

    {
        int v0, v1, v2, v3;

        asm volatile (".set    noat\n\t");

        asm volatile ("lq      $1,(%0)\n\t"
                      : : "r" (&data[i]) );

        asm volatile ("nop\n\t"
                      "nop\n\t"
                      "pextw   %0,$1,0\n\t"
                      "pextw   %1,$1,1\n\t"
                      "pextw   %2,$1,2\n\t"
                      "pextw   %3,$1,3\n\t"
                      : "=r" (v0), "=r" (v1), "=r" (v2), "=r" (v3) :);

        asm volatile (".set    at\n\t");

        mylib_display_dec(v0); mylib_display_char(' ');
        mylib_display_dec(v1); mylib_display_char(' ');
        mylib_display_dec(v2); mylib_display_char(' ');
        mylib_display_dec(v3); mylib_display_char(' ');

        mylib_display_newline();
    }

#else
# error "illegal USE_SIMD setting"
#endif

#else   /* not-defined USE_SIMD */
    /* original code */
    for (i = 0; i < 100; i++) {
        mylib_display_dec(data[i]);
        mylib_display_char(' ');
    }
    mylib_display_newline();
#endif  /* not-defined USE_SIMD */
    
    /* -----  main kernel ----- */ 
#ifdef  USE_QSORT
    qsort(data, 0, n-1);
#endif
#ifdef  USE_RADIXSORT
    radix_sort(data, n);
#endif
    
    /* -----  show result ----- */
    mylib_display_newline();
    for (i = 0; i < n; i=i+n/100) {
        mylib_display_dec(data[i]);
        mylib_display_char(' ');
    }
    mylib_display_newline();
    
    mylib_finalize();
    return 0;
}
/**********************************************************************/
